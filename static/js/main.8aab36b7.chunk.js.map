{"version":3,"sources":["img/floordoor_logo.svg","components/Toolbar.jsx","components/Menu.jsx","components/Album.jsx","lib/utils.js","components/AlbumGrid.jsx","components/Player.jsx","components/Release.jsx","components/Artist.jsx","components/ArtistGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","props","state","isOpen","handleMenuClicked","bind","getButtonStyle","this","className","onMenuClicked","prevProps","prevState","snapshot","setState","onClick","getIcon","src","logo","alt","Component","Menu","getOpenClass","exact","to","activeClassName","React","Album","slugify","albumData","title","image","artist","Utils","callback","fetch","then","response","json","data","catch","e","albums","name","length","lowestDistance","levenshteinDistance","lowestIndex","i","distance","charAt","a","b","distanceMatrix","Array","fill","map","j","indicator","Math","min","AlbumGrid","fetchAlbumData","fetchAllAlbums","err","console","log","slice","album","key","Player","albumId","merchId","seamless","Release","slug","match","params","findAlbumByName","notes","bandcamp_id","merch_id","Artist","artistData","cover_image","ArtistGrid","artists","fetchArtistData","fetchAllArtists","App","isMenuOpen","basename","process","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8aab36b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/floordoor_logo.222aeaaf.svg\";","import React, {Component} from 'react';\nimport './Toolbar.css';\nimport logo from '../img/floordoor_logo.svg';\n\nexport default class Toolbar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen\n        };\n\n        this.handleMenuClicked = this.handleMenuClicked.bind(this);\n        this.getButtonStyle = this.getButtonStyle.bind(this);\n    }\n\n    getIcon() {\n        if (this.state.isOpen) {\n            return (<i className=\"material-icons\">\n                menu_open\n            </i>);\n        } else {\n            return (<i className=\"material-icons\">\n                menu\n            </i>);\n        }\n    }\n\n    handleMenuClicked() {\n        if(this.props.onMenuClicked) {\n            this.props.onMenuClicked(!this.state.isOpen);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.isOpen !== prevProps.isOpen) {\n            this.setState({\n                isOpen: this.props.isOpen\n            });\n        }\n    }\n\n    getButtonStyle() {\n        if(this.state.isOpen) {\n            return \"Toolbar-menu Toolbar-open\";\n        } else {\n            return \"Toolbar-menu\";\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Toolbar\">\n                <button className={this.getButtonStyle()} onClick={this.handleMenuClicked}>\n                    {this.getIcon()}\n                </button>\n                <div className=\"Toolbar-title\">\n                    <img src={logo} alt=\"logo\"/>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './Menu.css';\nimport {NavLink} from \"react-router-dom\";\n\nexport default class Menu extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: this.props.isOpen\n        };\n    }\n\n    getOpenClass() {\n        return this.state.isOpen ? 'Menu Menu-open' : 'Menu';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.isOpen !== prevProps.isOpen) {\n            this.setState({\n                isOpen: this.props.isOpen\n            });\n        }\n    }\n\n    render() {\n        return(\n            <div className={this.getOpenClass()}>\n                <div/>\n                <div className=\"Menu-link-container\">\n                    <ul>\n                        <li><NavLink exact to=\"/\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Releases</NavLink></li>\n                        <li><NavLink to=\"/artists\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Artists</NavLink></li>\n                        <li><NavLink exact to=\"/contact\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Contact</NavLink></li>\n                    </ul>\n                </div>\n                <div className=\"Menu-footer\">\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Album.css';\nimport {Link} from \"react-router-dom\";\nimport slugify from 'slugify';\n\nexport default class Album extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Album\" >\n                <Link to={`/releases/${slugify(this.props.albumData.title)}`}>\n                    <img src={this.props.albumData.image} alt={this.props.albumData.title}/>\n                    <div className=\"Album-overlay\" >\n                        <h4>{this.props.albumData.title}</h4>\n                        <h5>{this.props.albumData.artist}</h5>\n                    </div>\n                </Link>\n            </div>\n        )\n    }\n}","export default class Utils {\n\n    static fetchAllAlbums(callback) {\n        fetch('/data/albums.json')\n            .then((response) => {\n                return response.json()\n            }).then((data) => {\n                callback(null, data);\n            }).catch(e  => {\n                callback(e);\n        });\n    }\n\n    static fetchAllArtists(callback) {\n        fetch('/data/artists.json')\n            .then((response) => {\n                return response.json()\n            }).then((data) => {\n            callback(null, data);\n        }).catch(e  => {\n            callback(e);\n        });\n    }\n\n    /**\n     * Search all the albums and get one by name\n     * which is closest to the one searched for\n     * @param albums\n     * @param name\n     */\n    static findAlbumByName(albums, name) {\n        if(albums.length > 0) {\n            let lowestDistance = Utils.levenshteinDistance(name, albums[0].title);\n            let lowestIndex = 0;\n            for(let i = 1; i < albums.length; i++) {\n                let distance = Utils.levenshteinDistance(name, albums[i].title);\n                if(distance < lowestDistance) {\n                    lowestIndex = i;\n                    lowestDistance = distance;\n                }\n            }\n            return albums[lowestIndex].title.charAt(0) === name.charAt(0) ? albums[lowestIndex] : null;\n        }\n        return null;\n    }\n\n    /**\n     * @param {string} a\n     * @param {string} b\n     * @return {number}\n     */\n    static  levenshteinDistance(a, b) {\n        // Create empty edit distance matrix for all possible modifications of\n        // substrings of a to substrings of b.\n        const distanceMatrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n\n        // Fill the first row of the matrix.\n        // If this is first row then we're transforming empty string to a.\n        // In this case the number of transformations equals to size of a substring.\n        for (let i = 0; i <= a.length; i += 1) {\n            distanceMatrix[0][i] = i;\n        }\n\n        // Fill the first column of the matrix.\n        // If this is first column then we're transforming empty string to b.\n        // In this case the number of transformations equals to size of b substring.\n        for (let j = 0; j <= b.length; j += 1) {\n            distanceMatrix[j][0] = j;\n        }\n\n        for (let j = 1; j <= b.length; j += 1) {\n            for (let i = 1; i <= a.length; i += 1) {\n                const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n                distanceMatrix[j][i] = Math.min(\n                    distanceMatrix[j][i - 1] + 1, // deletion\n                    distanceMatrix[j - 1][i] + 1, // insertion\n                    distanceMatrix[j - 1][i - 1] + indicator, // substitution\n                );\n            }\n        }\n\n        return distanceMatrix[b.length][a.length];\n    }\n\n}","import React from 'react';\nimport './AlbumGrid.css';\nimport Album from \"./Album\";\nimport Utils from \"../lib/utils\";\n\nexport default class AlbumGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            albumData: []\n        };\n\n        this.fetchAlbumData = this.fetchAlbumData.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchAlbumData();\n    }\n\n    fetchAlbumData() {\n        Utils.fetchAllAlbums((err, albums) => {\n            if(err) {\n                console.log(err);\n            } else {\n                this.setState({\n                    albumData: albums\n                })\n            }\n        });\n    }\n\n    render() {\n        let albumData = this.state.albumData.slice();\n        return (\n            <div className=\"AlbumGrid\">\n                {\n                    albumData.map((album) => {\n                        return (<Album albumData={album} key={album.title}/>);\n                        })\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Player.css';\n\nexport default class Player extends React.Component {\n\n    render() {\n        return(\n            <div className=\"Player\">\n                <iframe title={this.props.title} src={`https://bandcamp.com/EmbeddedPlayer/album=${this.props.albumId}/size=large/bgcol=ffffff/linkcol=333333/package=${this.props.merchId ? this.props.merchId : ''}/transparent=true/`} seamless/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Utils from \"../lib/utils\";\nimport './Release.css';\nimport Player from \"./Player\";\nimport {Redirect} from \"react-router-dom\";\n\nexport default class Release extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            albumData: this.props.albumData\n        };\n\n        this.fetchAlbumData = this.fetchAlbumData.bind(this);\n    }\n\n    componentDidMount() {\n        if(!this.state.albumData) {\n            this.fetchAlbumData();\n        }\n    }\n\n    fetchAlbumData() {\n        let slug = this.props.match.params.slug;\n        Utils.fetchAllAlbums((err, albums) => {\n            if(err) {\n                console.log(err);\n            } else {\n                let album = Utils.findAlbumByName(albums, slug);\n                this.setState({\n                    albumData: album\n                })\n            }\n        });\n    }\n\n    render() {\n        if(this.state.albumData) {\n            return(\n                <div className=\"Release\">\n                    <div className=\"Release-title\">\n                        <h1>{this.state.albumData.title}</h1>\n                        <h3>{this.state.albumData.artist}</h3>\n                    </div>\n                    <div className=\"Release-info\">\n                        <p>{this.state.albumData.notes}</p>\n                    </div>\n                    <div className=\"Release-player\">\n                        <Player albumId={this.state.albumData.bandcamp_id} merchId={this.state.albumData.merch_id}/>\n                    </div>\n                </div>\n            )\n        } else if(this.state.albumData === null){\n            return (<Redirect to=\"/releases\"/>);\n        } else {\n            return (<div></div>);\n        }\n    }\n}","import React from 'react';\nimport './Artist.css';\n\nexport default class Artist extends React.Component {\n\n    render() {\n        return(\n            <div className=\"Artist\">\n                <img src={this.props.artistData.cover_image} alt={this.props.artistData.title}/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './ArtistGrid.css';\nimport Artist from \"./Artist\";\nimport Utils from \"../lib/utils\";\n\nexport default class ArtistGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            artists: []\n        };\n\n        this.fetchArtistData = this.fetchArtistData.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchArtistData();\n    }\n\n    fetchArtistData() {\n        Utils.fetchAllArtists((err, artists) => {\n            if(err) {\n                console.log(err);\n            } else {\n                this.setState({\n                    artists: artists\n                });\n            }\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"ArtistGrid\">\n                <div className=\"ArtistGrid-columns\">\n                    {\n                        this.state.artists.map((artist) => {\n                            return(\n                                <Artist artistData={artist} key={artist.name}/>\n                            )\n                        })\n                    }\n                </div>\n                <div className=\"ArtistGrid-arrow\">\n                    <i className=\"material-icons\">\n                        navigate_next\n                    </i>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Toolbar from \"./components/Toolbar\";\nimport Menu from './components/Menu';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport AlbumGrid from \"./components/AlbumGrid\";\nimport Release from \"./components/Release\";\nimport ArtistGrid from \"./components/ArtistGrid\";\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isMenuOpen: false\n        };\n\n        this.handleMenuClicked = this.handleMenuClicked.bind(this);\n    }\n\n    handleMenuClicked(isOpen) {\n        this.setState({\n            isMenuOpen: isOpen\n        });\n    }\n\n    render() {\n        return (\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <Toolbar isOpen={this.state.isMenuOpen} onMenuClicked={this.handleMenuClicked}/>\n                        <Menu isOpen={this.state.isMenuOpen}/>\n                    </header>\n                    <div className=\"App-content\">\n                            <Switch>\n                                <Route exact path=\"/\" render={props => (<AlbumGrid {...props}/>)}/>\n                                <Route exact path=\"/releases\" render={props => (<AlbumGrid {...props}/>)}/>\n                                <Route path=\"/releases/:slug\" render={props => (<Release {...props}/>)}/>\n                                <Route exact path=\"/artists\" render={props => (<ArtistGrid {...props}/>)}/>\n                            </Switch>\n                    </div>\n                    <footer className=\"App-footer\">\n                        Floordoor Records\n                    </footer>\n                </div>\n            </HashRouter>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}