{"version":3,"sources":["img/floordoor_logo.svg","components/Toolbar.jsx","components/Menu.jsx","components/Album.jsx","components/AlbumGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","props","state","isOpen","handleMenuClicked","bind","getButtonStyle","this","className","onMenuClicked","prevProps","prevState","snapshot","setState","onClick","getIcon","src","logo","alt","Component","Menu","getOpenClass","basename","process","to","activeClassName","React","Album","albumData","image","title","artist","AlbumGrid","fetchAlbumData","fetch","then","response","json","data","console","log","slice","map","album","key","App","isMenuOpen","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fadc6dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/floordoor_logo.222aeaaf.svg\";","import React, {Component} from 'react';\nimport './Toolbar.css';\nimport logo from '../img/floordoor_logo.svg';\n\nexport default class Toolbar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen\n        };\n\n        this.handleMenuClicked = this.handleMenuClicked.bind(this);\n        this.getButtonStyle = this.getButtonStyle.bind(this);\n    }\n\n    getIcon() {\n        if (this.state.isOpen) {\n            return (<i className=\"material-icons\">\n                menu_open\n            </i>);\n        } else {\n            return (<i className=\"material-icons\">\n                menu\n            </i>);\n        }\n    }\n\n    handleMenuClicked() {\n        if(this.props.onMenuClicked) {\n            this.props.onMenuClicked(!this.state.isOpen);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.isOpen !== prevProps.isOpen) {\n            this.setState({\n                isOpen: this.props.isOpen\n            });\n        }\n    }\n\n    getButtonStyle() {\n        if(this.state.isOpen) {\n            return \"Toolbar-menu Toolbar-open\";\n        } else {\n            return \"Toolbar-menu\";\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Toolbar\">\n                <button className={this.getButtonStyle()} onClick={this.handleMenuClicked}>\n                    {this.getIcon()}\n                </button>\n                <div className=\"Toolbar-title\">\n                    <img src={logo} alt=\"logo\"/>\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport './Menu.css';\nimport {BrowserRouter, NavLink} from \"react-router-dom\";\n\nexport default class Menu extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: this.props.isOpen\n        };\n    }\n\n    getOpenClass() {\n        return this.state.isOpen ? 'Menu Menu-open' : 'Menu';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.isOpen !== prevProps.isOpen) {\n            this.setState({\n                isOpen: this.props.isOpen\n            });\n        }\n    }\n\n    render() {\n        return(\n            <div className={this.getOpenClass()}>\n                <div/>\n                <div className=\"Menu-link-container\">\n                    <BrowserRouter basename={process.env.PUBLIC_URL}>\n                        <ul>\n                            <li><NavLink to=\"/\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Releases</NavLink></li>\n                            <li><NavLink to=\"/artists\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Artists</NavLink></li>\n                            <li><NavLink to=\"/contact\" className=\"Menu-link\" activeClassName=\"Menu-selected\">Contact</NavLink></li>\n                        </ul>\n                    </BrowserRouter>\n                </div>\n                <div className=\"Menu-footer\">\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Album.css';\n\nexport default class Album extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Album\" >\n                <img src={this.props.albumData.image} alt={this.props.albumData.title}/>\n                <div className=\"Album-overlay\" >\n                    <h4>{this.props.albumData.title}</h4>\n                    <h5>{this.props.albumData.artist}</h5>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './AlbumGrid.css';\nimport Album from \"./Album\";\n\nexport default class AlbumGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            albumData: []\n        };\n\n        this.fetchAlbumData = this.fetchAlbumData.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchAlbumData();\n    }\n\n    fetchAlbumData() {\n        fetch('data/albums.json')\n            .then((response) => {\n                return response.json()\n            }).then((data) => {\n                this.setState({\n                    albumData: data\n                }, () => {\n                    console.log('loaded');\n                })\n        });\n    }\n\n    render() {\n        let albumData = this.state.albumData.slice();\n        console.log(albumData);\n        return (\n            <div className=\"AlbumGrid\">\n                {\n                    albumData.map((album) => {\n                        return (<Album albumData={album} key={album.title}/>);\n                        })\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Toolbar from \"./components/Toolbar\";\nimport Menu from './components/Menu';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport AlbumGrid from \"./components/AlbumGrid\";\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isMenuOpen: false\n        };\n\n        this.handleMenuClicked = this.handleMenuClicked.bind(this);\n    }\n\n    handleMenuClicked(isOpen) {\n        this.setState({\n            isMenuOpen: isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Toolbar isOpen={this.state.isMenuOpen} onMenuClicked={this.handleMenuClicked}/>\n                    <Menu isOpen={this.state.isMenuOpen}/>\n                </header>\n                <div className=\"App-content\">\n                    <BrowserRouter basename={process.env.PUBLIC_URL}>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <AlbumGrid />\n                            </Route>\n                        </Switch>\n                    </BrowserRouter>\n                </div>\n                <footer className=\"App-footer\">\n                    Floordoor Records\n                </footer>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}